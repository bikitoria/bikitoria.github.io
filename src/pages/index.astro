---
import Layout from "../layouts/Layout.astro";
import TypingText from "../components/TypingText.astro";
---

<Layout>
  <section class="hero-block">
    <TypingText class="hero-title" keepWords={2} keepPrefix={3}>
      Hi, I'm Victoria
    </TypingText>
    <p class="hero-subtitle">UCalgary Computer Science • Software Dev</p>
  </section>

  <section class="about">
    <p>
      I’m a Computer Science student at the University of Calgary with a passion
      for software development, competitive programming, economic
      history, and the gym.
    </p>
  </section>

  <div style="max-width: 1000px; margin: auto; height: 420px;">
    <canvas id="expChart" style="width:100%; height:100%;"></canvas>
  </div>
  <h2 id="portfolio" class="portfolio-title">Portfolio</h2>
  <section class="portfolio">
    <!-- Card 1 -->
    <article class="card">
      <img src="/images/project1.jpg" alt="Project 1 screenshot" />
      <div class="card-body">
        <h3>Project One</h3>
        <p>Short one-liner about what it does and your role.</p>
        <div class="card-links">
          <a href="https://your-live-demo.com" target="_blank" rel="noopener"
            >Live</a
          >
          <a
            href="https://github.com/bikitoria/project-one"
            target="_blank"
            rel="noopener">Code</a
          >
        </div>
      </div>
    </article>

    <!-- Card 2 -->
    <article class="card">
      <img src="/images/project2.jpg" alt="Project 2 screenshot" />
      <div class="card-body">
        <h3>Project Two</h3>
        <p>One-liner description, stack, impact.</p>
        <div class="card-links">
          <a href="https://your-live-demo.com" target="_blank" rel="noopener"
            >Live</a
          >
          <a
            href="https://github.com/bikitoria/project-two"
            target="_blank"
            rel="noopener">Code</a
          >
        </div>
      </div>
    </article>
  </section>

  <!-- Chart.js -->
  <script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"
  ></script>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", async () => {
      const el = document.getElementById("expChart");
      if (!el || !window.Chart) return;

      // 1) Load & sort experiences
      let data = [];
      try {
        const res = await fetch("/data/experiences.json", {
          cache: "no-store",
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        data = await res.json();
      } catch (e) {
        console.error("Could not load experiences:", e);
        return;
      }
      data.sort((a, b) => new Date(a.date) - new Date(b.date));

      // 2) Build series with a real, lowest first point
      const labels = [];
      const values = [];
      const isReal = [];
      const titles = [];

      const PEAK = (i) => {
        const t = i + 1;
        const bump = 0.8 + i * 0.15; // peak above baseline
        return t + bump;
      };
      const DIP = (i) => {
        const t = i + 1;
        const dipAmt = 1.2 + i * 0.2; // dramatic dip
        // Clamp dips so they are NEVER as low as the first point
        return Math.max(0.45, t - dipAmt); // >= 0.45
      };

      // First real experience: lowest starting point
      labels.push(
        new Date(data[0].date).toLocaleDateString(undefined, {
          month: "short",
          year: "numeric",
        })
      );
      values.push(0.3); // force lowest value
      isReal.push(true);
      titles.push(data[0].title);

      // Then: peak (real) → dip (synthetic) → peak → ...
      for (let i = 1; i < data.length; i++) {
        // real peak for this experience
        labels.push(
          new Date(data[i].date).toLocaleDateString(undefined, {
            month: "short",
            year: "numeric",
          })
        );
        values.push(PEAK(i));
        isReal.push(true);
        titles.push(data[i].title);

        // synthetic dip (if not last)
        if (i < data.length - 1) {
          labels.push("");
          values.push(DIP(i));
          isReal.push(false);
          titles.push("");
        }
      }

      labels.push("Future");
      values.push(PEAK(data.length)); // or maybe a fixed value (like last + 1)
      isReal.push(true); // show the dot
      titles.push("Future Opportunity (TBD)");

      // 3) Theme colors
      const cs = getComputedStyle(document.documentElement);
      const lineColor = cs.getPropertyValue("--link").trim() || "#007bff";

      // 4) Chart (axes hidden, big dots only on real points)
      const chart = new Chart(el.getContext("2d"), {
        type: "line",
        data: {
          labels,
          datasets: [
            {
              data: values,
              borderColor: lineColor,
              borderWidth: 3,
              tension: 0, // choppy, sharp corners
              fill: false,
              pointRadius: (ctx) => (isReal[ctx.dataIndex] ? 9 : 0),
              pointHoverRadius: (ctx) => (isReal[ctx.dataIndex] ? 11 : 0),
              pointBackgroundColor: lineColor,
              pointBorderColor: "#fff",
              pointBorderWidth: 2,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              filter: (ti) => isReal[ti.dataIndex], // only real points
              enabled: false,                       // disable default
              external: function(ctx) {
                // Tooltip element
                let tooltipEl = document.getElementById('chartjs-tooltip');
                if (!tooltipEl) {
                  tooltipEl = document.createElement('div');
                  tooltipEl.id = 'chartjs-tooltip';
                  tooltipEl.style.position = 'absolute';
                  tooltipEl.style.background = '#fff';
                  tooltipEl.style.border = '1px solid #ccc';
                  tooltipEl.style.borderRadius = '8px';
                  tooltipEl.style.padding = '10px';
                  tooltipEl.style.pointerEvents = 'none';
                  tooltipEl.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
                  document.body.appendChild(tooltipEl);
                }

                const tooltipModel = ctx.tooltip;
                if (tooltipModel.opacity === 0) {
                  tooltipEl.style.opacity = 0;
                  return;
                }

                const i = tooltipModel.dataPoints[0].dataIndex;
                // Map chart index back to job index
                const jobIndex = Math.min(Math.floor(i / 2), data.length - 1);
                const job = data[jobIndex];

                tooltipEl.innerHTML = `
                <div style="display:flex;align-items:center;gap:10px;max-width:300px;">
                  <img src="${job.logo}" style="width:40px;height:40px;object-fit:contain;" />
                  <div>
                    <strong>${job.title}</strong><br>
                    ${job.company}<br>
                    <small>
                      ${new Date(job.dateStart).toLocaleDateString(undefined, { month: "long", day: "numeric", year: "numeric" })}
                      –
                      ${new Date(job.dateEnd).toLocaleDateString(undefined, { month: "long", day: "numeric", year: "numeric" })}
                    </small>
                  </div>
                </div>
                `

                // Position tooltip relative to canvas
                const {offsetLeft: posX, offsetTop: posY} = ctx.chart.canvas;
                tooltipEl.style.opacity = 1;
                tooltipEl.style.left = posX + tooltipModel.caretX + 'px';
                tooltipEl.style.top  = posY + tooltipModel.caretY + 'px';
              }
            },
          },
          scales: {
            x: { display: false },
            y: { display: false },
          },
        },
      });

      // 5) Update colors on theme toggle
      const recolor = () => {
        const c = getComputedStyle(document.documentElement);
        const line = c.getPropertyValue("--link").trim() || lineColor;
        chart.data.datasets[0].borderColor = line;
        chart.data.datasets[0].pointBackgroundColor = line;
        chart.update();
      };
      new MutationObserver(recolor).observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["data-theme"],
      });
    });
  </script>
</Layout>
